<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tassle.Services</name>
    </assembly>
    <members>
        <member name="T:Tassle.Services.ControllableService">
            <summary>
            ControllableService class.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableService.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Tassle.Services.ControllableService"/> class.
            </summary>
        </member>
        <member name="E:Tassle.Services.ControllableService.Started">
            <summary>
            Occurs when [started].
            </summary>
        </member>
        <member name="E:Tassle.Services.ControllableService.Stopped">
            <summary>
            Occurs when [stopped].
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableService.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableService.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableService.Restart">
            <summary>
            Restarts this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableService.OnDispose(System.Boolean)">
            <summary>
            Called when [dispose].
            </summary>
            <param name="releaseManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources</param>
        </member>
        <member name="M:Tassle.Services.ControllableService.ServiceStart">
            <summary>
            Invokes events will be occurred during the service start.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableService.ServiceStop">
            <summary>
            Invokes events will be occurred during the service stop.
            </summary>
        </member>
        <member name="T:Tassle.Services.ControllableServiceInterface">
            <summary>
            ControllableServiceInterface interface.
            </summary>
        </member>
        <member name="E:Tassle.Services.ControllableServiceInterface.Started">
            <summary>
            Occurs when [started].
            </summary>
        </member>
        <member name="E:Tassle.Services.ControllableServiceInterface.Stopped">
            <summary>
            Occurs when [stopped].
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableServiceInterface.Restart">
            <summary>
            Restarts this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableServiceInterface.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ControllableServiceInterface.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:Tassle.Services.LocalResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.AnErrorOccurredWhileStartingService">
            <summary>
              Looks up a localized string similar to An error occurred while starting service &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.AnErrorOccurredWhileStoppingService">
            <summary>
              Looks up a localized string similar to An error occurred while stopping service &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.ServiceHasBeenStarted">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; has been started..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.ServiceHasBeenStopped">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; has been stopped..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.ServiceIsBeingStarted">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; is being started..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.ServiceIsBeingStopped">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; is being stopped..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.TheServiceIsNotReadyToGetStarted">
            <summary>
              Looks up a localized string similar to The service is not ready to get started..
            </summary>
        </member>
        <member name="P:Tassle.Services.LocalResource.TheServiceIsNotReadyToGetStopped">
            <summary>
              Looks up a localized string similar to The service is not ready to get stopped..
            </summary>
        </member>
        <member name="T:Tassle.Services.Service">
            <summary>
            Service class.
            </summary>
        </member>
        <member name="F:Tassle.Services.Service._status">
            <summary>
            The status
            </summary>
        </member>
        <member name="F:Tassle.Services.Service._statusDate">
            <summary>
            The status date
            </summary>
        </member>
        <member name="F:Tassle.Services.Service._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Tassle.Services.Service._disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:Tassle.Services.Service.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Tassle.Services.Service"/> class.
            </summary>
        </member>
        <member name="M:Tassle.Services.Service.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tassle.Services.Service"/> class.
            </summary>
        </member>
        <member name="P:Tassle.Services.Service.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tassle.Services.Service.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Tassle.Services.Service.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Tassle.Services.Service.StatusDate">
            <summary>
            Gets or sets the status date.
            </summary>
            <value>
            The status date.
            </value>
        </member>
        <member name="P:Tassle.Services.Service.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Tassle.Services.Service.Disposed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Tassle.Services.Service"/> is disposed.
            </summary>
            <value>
              <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Tassle.Services.Service.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Tassle.Services.Service.OnDispose(System.Boolean)">
            <summary>
            Called when [dispose].
            </summary>
            <param name="releaseManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources</param>
        </member>
        <member name="M:Tassle.Services.Service.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="releaseManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources</param>
        </member>
        <member name="T:Tassle.Services.ServiceContainer">
            <summary>
            ServiceContainer class.
            </summary>
        </member>
        <member name="F:Tassle.Services.ServiceContainer._children">
            <summary>
            The children
            </summary>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Tassle.Services.ServiceContainer"/> class.
            </summary>
        </member>
        <member name="E:Tassle.Services.ServiceContainer.StartedWithChildren">
            <summary>
            Occurs when [on start with children].
            </summary>
        </member>
        <member name="P:Tassle.Services.ServiceContainer.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.AddChild(Tassle.Services.ServiceInterface[])">
            <summary>
            Adds the child.
            </summary>
            <param name="services">The services</param>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.FindByPath(System.String)">
            <summary>
            Finds an service with path notation.
            </summary>
            <param name="path">Path of the service</param>
            <returns>A service instance</returns>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.FindByPath``1(System.String)">
            <summary>
            Finds an service with path notation.
            </summary>
            <typeparam name="T">A type</typeparam>
            <param name="path">Path of the service</param>
            <returns>A service instance</returns>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.Find``1(System.Boolean)">
            <summary>
            Finds the specified dependency (recursively if needed).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns>Service if found</returns>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Tassle.Services.ServiceContainer.OnDispose(System.Boolean)">
            <summary>
            Called when [dispose].
            </summary>
            <param name="releaseManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources</param>
        </member>
        <member name="T:Tassle.Services.ServiceContainerInterface">
            <summary>
            ServiceContainerInterface interface.
            </summary>
        </member>
        <member name="E:Tassle.Services.ServiceContainerInterface.StartedWithChildren">
            <summary>
            Occurs when [started with children].
            </summary>
        </member>
        <member name="P:Tassle.Services.ServiceContainerInterface.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="M:Tassle.Services.ServiceContainerInterface.AddChild(Tassle.Services.ServiceInterface[])">
            <summary>
            Adds the child.
            </summary>
            <param name="services">The services</param>
        </member>
        <member name="M:Tassle.Services.ServiceContainerInterface.FindByPath(System.String)">
            <summary>
            Finds an service with path notation.
            </summary>
            <param name="path">Path of the service</param>
            <returns>A service instance</returns>
        </member>
        <member name="M:Tassle.Services.ServiceContainerInterface.FindByPath``1(System.String)">
            <summary>
            Finds an service with path notation.
            </summary>
            <typeparam name="T">A type</typeparam>
            <param name="path">Path of the service</param>
            <returns>A service instance</returns>
        </member>
        <member name="M:Tassle.Services.ServiceContainerInterface.Find``1(System.Boolean)">
            <summary>
            Finds the specified dependency (recursively if needed).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="recursive">if set to <c>true</c> [recursive].</param>
            <returns>Service if found</returns>
        </member>
        <member name="T:Tassle.Services.ServiceInterface">
            <summary>
            ServiceInterface interface.
            </summary>
        </member>
        <member name="P:Tassle.Services.ServiceInterface.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Tassle.Services.ServiceInterface.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Tassle.Services.ServiceInterface.Status">
            <summary>
            Gets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Tassle.Services.ServiceInterface.StatusDate">
            <summary>
            Gets the status date.
            </summary>
            <value>
            The status date.
            </value>
        </member>
        <member name="P:Tassle.Services.ServiceInterface.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="T:Tassle.Services.ServiceStatus">
            <summary>
            Status of the service instance.
            </summary>
        </member>
        <member name="F:Tassle.Services.ServiceStatus.Passive">
            <summary>
            The passive
            </summary>
        </member>
        <member name="F:Tassle.Services.ServiceStatus.Running">
            <summary>
            The running
            </summary>
        </member>
        <member name="F:Tassle.Services.ServiceStatus.Stopped">
            <summary>
            The stopped
            </summary>
        </member>
        <member name="T:Tassle.Services.ServiceStatusChangedEventArgs">
            <summary>
            ServiceStatusChangedEventArgs class.
            </summary>
        </member>
        <member name="F:Tassle.Services.ServiceStatusChangedEventArgs._previousState">
            <summary>
            The previous state
            </summary>
        </member>
        <member name="F:Tassle.Services.ServiceStatusChangedEventArgs._status">
            <summary>
            The status
            </summary>
        </member>
        <member name="M:Tassle.Services.ServiceStatusChangedEventArgs.#ctor(Tassle.Services.ServiceStatus,Tassle.Services.ServiceStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Tassle.Services.ServiceStatusChangedEventArgs"/> class.
            </summary>
            <param name="previousState">State of the previous</param>
            <param name="status">The status</param>
        </member>
        <member name="P:Tassle.Services.ServiceStatusChangedEventArgs.PreviousState">
            <summary>
            Gets the state of the previous.
            </summary>
            <value>
            The state of the previous.
            </value>
        </member>
        <member name="P:Tassle.Services.ServiceStatusChangedEventArgs.Status">
            <summary>
            Gets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
    </members>
</doc>
